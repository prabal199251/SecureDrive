package main

import (
	"context"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"

	"golang.org/x/oauth2"
	"google.golang.org/api/drive/v3"
	"google.golang.org/api/option"
)

var ctx = context.Background()

func main() {
	oauthConfig := &oauth2.Config{
		ClientID:     "707223796998-csu5jm55tohljkubhd0oq5cckomhtqcm.apps.googleusercontent.com",
		ClientSecret: "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",
		RedirectURL:  "http://localhost:8080/oauth2callback",
		Scopes:       []string{drive.DriveScope},
		Endpoint: oauth2.Endpoint{
			AuthURL:  "https://accounts.google.com/o/oauth2/auth",
			TokenURL: "https://accounts.google.com/o/oauth2/token",
		},
	}

	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		url := oauthConfig.AuthCodeURL("state-token", oauth2.AccessTypeOffline)
		http.Redirect(w, r, url, http.StatusTemporaryRedirect)
	})

	http.HandleFunc("/oauth2callback", func(w http.ResponseWriter, r *http.Request) {
		code := r.URL.Query().Get("code")
		token, err := oauthConfig.Exchange(ctx, code)
		if err != nil {
			http.Error(w, fmt.Sprintf("Unable to retrieve token: %v", err), http.StatusInternalServerError)
			return
		}

		httpClient := oauthConfig.Client(ctx, token)
		srv, err := drive.NewService(ctx, option.WithHTTPClient(httpClient))
		if err != nil {
			http.Error(w, fmt.Sprintf("Unable to create Drive service: %v", err), http.StatusInternalServerError)
			return
		}

		// List files
		listFiles(srv)

		// Upload file
		uploadFile(srv, "example.txt")

		// Download file
		downloadFile(srv, "fileID", "downloaded_file.txt")

		fmt.Fprintf(w, "Authorization successful!")
	})

	log.Fatal(http.ListenAndServe(":8080", nil))
}

// List files in Google Drive
func listFiles(srv *drive.Service) {
	files, err := srv.Files.List().PageSize(10).Fields("nextPageToken, files(id, name)").Do()
	if err != nil {
		log.Fatalf("Unable to retrieve files: %v", err)
	}
	fmt.Println("Files:")
	if len(files.Files) == 0 {
		fmt.Println("No files found.")
	} else {
		for _, file := range files.Files {
			fmt.Printf("- %s (%s)\n", file.Name, file.Id)
		}
	}
}

// Upload file to Google Drive
func uploadFile(srv *drive.Service, filePath string) {
	file, err := os.Open(filePath)
	if err != nil {
		log.Fatalf("Unable to open file: %v", err)
	}
	defer file.Close()

	f := &drive.File{Name: "example.txt"}
	_, err = srv.Files.Create(f).Media(file).Do()
	if err != nil {
		log.Fatalf("Unable to upload file: %v", err)
	}
	fmt.Println("File uploaded successfully.")
}

// Download file from Google Drive
func downloadFile(srv *drive.Service, fileID, destPath string) {
	resp, err := srv.Files.Get(fileID).Download()
	if err != nil {
		log.Fatalf("Unable to download file: %v", err)
	}
	defer resp.Body.Close()

	outFile, err := os.Create(destPath)
	if err != nil {
		log.Fatalf("Unable to create file: %v", err)
	}
	defer outFile.Close()

	_, err = io.Copy(outFile, resp.Body)
	if err != nil {
		log.Fatalf("Unable to save file: %v", err)
	}
	fmt.Println("File downloaded successfully.")
}
